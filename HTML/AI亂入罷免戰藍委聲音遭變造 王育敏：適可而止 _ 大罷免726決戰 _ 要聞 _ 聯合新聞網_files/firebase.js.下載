
import { initializeApp } from 'https://www.gstatic.com/firebasejs/10.13.1/firebase-app.js'
import {  deleteToken, getMessaging, getToken, onMessage } from 'https://www.gstatic.com/firebasejs/10.13.1/firebase-messaging.js';
import { firebaseConfig, vapidKey } from '/static/js/firebase-config.js';

initializeApp(firebaseConfig);

const messaging = getMessaging();


if ('serviceWorker' in navigator) {
  navigator.serviceWorker.getRegistrations().then(function(registrations) {
        for (let registration of registrations) {
            console.log("FCM REG:" + registration);
            console.log("FCM ACTIVE SCRIPTURL:" + registration.active.scriptURL);
            if (registration.active.scriptURL == 'https://udn.com/umedia/sw.js') {
                console.log("remove old sw "+registration.active.scriptURL);
                registration.unregister();
            }
            if (registration.active.scriptURL.includes("https://udn.com/static/js/firebase-messaging-sw.js")) {
                console.log("remove old sw "+registration.active.scriptURL);
                registration.unregister();
            }
            if (registration.active.scriptURL == 'https://lab7-news.udn.com/static/js/firebase-messaging-sw.js') {
                console.log("remove old sw "+registration.active.scriptURL);
                registration.unregister();
            }
        }
    });
  } 
 



Notification.requestPermission().then((permission) => {
  if (permission === 'granted') {
    console.log('[firebase] Notification permission granted.');
    // TODO(developer): Retrieve a registration token for use with FCM.
    // In many cases once an app has been granted notification permission,
    // it should update its UI reflecting this.
    //console.log('[firebase] vapidKey: '+ vapidKey);
    getToken(messaging, { vapidKey }).then((currentToken) => {
      if (currentToken) {
        console.log('[firebase] currentToken: '+currentToken);
        // Send Instance ID token to app server.
        sendTokenToServer(currentToken);
        showToken(currentToken);
      } else {
        // Show permission request.
        console.log('[firebase] No registration token available. Request permission to generate one.');
        // Show permission UI.
        //updateUIForPushPermissionRequired();
        //setTokenSentToServer(false);
      }
    }).catch((err) => {
      console.log('[firebase] An error occurred while retrieving token. ', err);
      showToken('Error retrieving registration token.');
      //setTokenSentToServer(false);
    });
  } else {
    console.log('[firebase] Unable to get permission to notify.');
  }
});


// Handle incoming messages. Called when:
// - a message is received while the app has focus
// - the user clicks on an app notification created by a service worker
//   `messaging.setBackgroundMessageHandler` handler.
onMessage(messaging, (payload) => {
  console.log('[firebase] incoming Message received. ', payload);
  // Update the UI to include the received message.
  //appendMessage(payload);
});

function showToken(currentToken) {
  console.log('[firebase] current used token:', currentToken);
  saveToken(currentToken);
}


// Send the Instance ID token your application server, so that it can:
// - send messages back to this app
// - subscribe/unsubscribe the token from topics
function sendTokenToServer(currentToken) {
  if (!isTokenSentToServer(currentToken)) {

    var data = {
      token: currentToken,
      account: user_id
    };
    console.log(data);
    // TODO(developer): Send the current token to your server.
    //console.log( isTokenNeedReSend() );
    if (isTokenNeedReSend()) {
      data.update = true;
      //console.log( 'FCM isTokenNeedReSend' );
      /*if (data.account.length == 0) {
        //���厩���
        return;
      }*/
    }
    console.log('[firebase] Sending token to server...');
    fetch('https://fcm.udn.com/fcm/fetch/' + firebaseConfig['projectId'], {
      method: "POST",
      cache: 'no-cache',
      mode: 'cors',
      body: JSON.stringify(data)
    })
      //.then(data => console.log(data))
      .catch(error => console.error(error));
    //console.log( "FCM DATA ACCOUNT:"+ data.account.length,data.account );
    if (data.account === undefined || data.account.length == 0) {
      setTokenSentToServer('2');
    } else {
      setTokenSentToServer('1');
    }
  } else {
    console.log('[firebase] Token already sent to server so won\'t send it again unless it changes');
  }
}

function isTokenNeedReSend() {
  return window.localStorage.getItem('sentToServer') === '2';
}

function isTokenSentToServer(token) {
  return false;//wait for token refetch
  // return window.localStorage.getItem('sentToServer') === '1' && window.localStorage.getItem('token_'+firebaseConfig['projectId']) === token;
}
//0 not sent 1 sent 2 need account
function setTokenSentToServer(sent) {
  window.localStorage.setItem('sentToServer', sent);
}

function saveToken(token) {
  window.localStorage.setItem('token_'+firebaseConfig['projectId'], token);
}

